generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Endpoint {
  id             String             @id @default(cuid())
  name           String
  description    String?
  method         HttpMethod         @default(GET)
  path           String
  responseGen    ResponseGeneration @default(STATIC)
  staticResponse Json? // For hardcoded responses
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model Schema {
  id         Int           @id @default(autoincrement())
  name       String
  fields     SchemaField[] @relation("FieldToParentSchema")
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  ArrayType  ArrayType[]
  ObjectFields SchemaField[] @relation("FieldToObjectSchema")
}

model SchemaField {
  id   Int             @id @default(autoincrement())
  name String
  type SchemaFieldType

  // if type is id
  idFieldType IdFieldType?

  // if type is faker
  fakerType FakerType?

  schemaId Int?
  Schema   Schema? @relation("FieldToParentSchema", fields: [schemaId], references: [id])

  // if type is object and selected object type is not empty object
  objectSchemaId Int?
  objectSchema   Schema? @relation("FieldToObjectSchema", fields: [objectSchemaId], references: [id])

  // if type is array
  arrayTypeId Int? // Foreign key to ArrayType.id
  arrayType   ArrayType? @relation("SchemaFieldToArrayType", fields: [arrayTypeId], references: [id])
}

model ArrayType {
  id           Int             @id @default(autoincrement())
  elementType  SchemaFieldType

  // if type is object
  objectSchemaId     Int?
  objectSchema       Schema?        @relation(fields: [objectSchemaId], references: [id])
  
  SchemaFields SchemaField[]   @relation("SchemaFieldToArrayType")
}

enum HttpMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
}

enum ResponseGeneration {
  STATIC
  LLM
}

enum IdFieldType {
  UUID
  AUTOINCREMENT
}

enum SchemaFieldType {
  ID
  FAKER
  STRING
  INTEGER
  FLOAT
  BOOLEAN
  OBJECT
  ARRAY
  DATE
}

// fakerjs types
enum FakerType {
  // Person
  FIRST_NAME
  LAST_NAME
  FULL_NAME
  JOB_TITLE
  PHONE_NUMBER

  // Internet
  EMAIL
  USER_NAME
  PASSWORD
  URL
  IP_ADDRESS

  // Location
  CITY
  COUNTRY
  STATE
  STREET_ADDRESS
  ZIP_CODE
  LATITUDE
  LONGITUDE

  // Business
  COMPANY_NAME
  DEPARTMENT
  PRODUCT_NAME
  PRICE

  // Date & Time
  PAST_DATE
  FUTURE_DATE
  RECENT_DATE

  // Finance
  CREDIT_CARD_NUMBER
  ACCOUNT_NUMBER
  AMOUNT
  CURRENCY

  // Text
  WORD
  SENTENCE
  PARAGRAPH

  // System
  FILE_NAME
  DIRECTORY_PATH
  MIME_TYPE

  // Identifiers
  UUID
  DATABASE_ID
}
