generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Endpoint {
  id             String             @id @default(cuid())
  name           String
  description    String?
  method         HttpMethod         @default(GET)
  path           String
  // parameters  Json?    // Query parameters and path parameters
  // requestBody Json?    // Request body schema
  // response    Json?    // Response schema
  responseGen    ResponseGeneration @default(STATIC)
  staticResponse Json? // For hardcoded responses
  // arrayQuantity Int?   // For array responses
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model Schema {
  id         Int           @id @default(autoincrement())
  name       String
  // idField     IdFieldType
  // idFieldName String
  fields     SchemaField[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  ObjectType ObjectType[]
}

model SchemaField {
  id   Int             @id @default(autoincrement())
  name String
  type SchemaFieldType

  // if type is id
  idFieldType IdFieldType?

  // if type is faker
  fakerType FakerType?

  schemaId Int?
  Schema   Schema? @relation(fields: [schemaId], references: [id])

  // if type is object
  objectTypeId Int?
  ObjectType   ObjectType?

  // if type is array
  arrayType ArrayType? // Link to ArrayType
}

model ArrayType {
  id            Int              @id @default(autoincrement())
  elementType   SchemaFieldType? // For primitive types (STRING, INTEGER, etc.)
  objectTypeId  Int? // If elements are objects, link to ObjectType
  arrayTypeId   Int? // If elements are arrays, link to another ArrayType
  schemaFieldId Int              @unique
  schemaField   SchemaField      @relation(fields: [schemaFieldId], references: [id])
}

model ObjectType {
  id            Int         @id @default(autoincrement())
  schemaId      Int
  schemaFieldId Int         @unique
  schema        Schema      @relation(fields: [schemaId], references: [id])
  schemaField   SchemaField @relation(fields: [schemaFieldId], references: [id])
}

enum HttpMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
}

enum ResponseGeneration {
  STATIC
  LLM
}

enum IdFieldType {
  UUID
  AUTOINCREMENT
}

enum SchemaFieldType {
  ID
  FAKER
  STRING
  INTEGER
  FLOAT
  BOOLEAN
  OBJECT
  ARRAY
  DATE
}

// fakerjs types
enum FakerType {
  // Person
  FIRST_NAME
  LAST_NAME
  FULL_NAME
  JOB_TITLE
  PHONE_NUMBER

  // Internet
  EMAIL
  USER_NAME
  PASSWORD
  URL
  IP_ADDRESS

  // Location
  CITY
  COUNTRY
  STATE
  STREET_ADDRESS
  ZIP_CODE
  LATITUDE
  LONGITUDE

  // Business
  COMPANY_NAME
  DEPARTMENT
  PRODUCT_NAME
  PRICE

  // Date & Time
  PAST_DATE
  FUTURE_DATE
  RECENT_DATE

  // Finance
  CREDIT_CARD_NUMBER
  ACCOUNT_NUMBER
  AMOUNT
  CURRENCY

  // Text
  WORD
  SENTENCE
  PARAGRAPH

  // System
  FILE_NAME
  DIRECTORY_PATH
  MIME_TYPE

  // Identifiers
  UUID
  DATABASE_ID
}
